{"version":3,"sources":["components/NewsList.js","serviceWorker.js","components/VoteChart.js","App.js","index.js"],"names":["NewsList","hiddenIds","initData","bEnv","global","window","TimeAgo","addLocale","en","curPage","timeAgo","useState","data","setData","undefined","localStorage","getItem","split","forEach","elm","a","findIndex","obj","objectID","splice","upVote","e","hidePost","console","log","length","id","target","dataset","map","push","setItem","navigate","textContent","location","href","className","style","textAlign","key","num_comments","points","onClick","data-id","url","title","domain","from","String","replace","author","format","Date","created_at","suppressHydrationWarning","Boolean","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","catch","error","message","VoteChart","width","height","vertical","type","dataKey","stroke","dot","fill","strokeWidth","label","value","position","offset","angle","tickSize","tickLine","padding","left","right","interval","fontSize","fontWeight","App","votes","ReactDOM","hydrate","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68c69cd3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport TimeAgo from 'javascript-time-ago';\r\nimport en from 'javascript-time-ago/locale/en';\r\nimport domain from 'url-domain-name';\r\nimport './newsList.scss';\r\n\r\nconst NewsList = ({ initData }) => {\r\n\tconst bEnv = global.window;\r\n\tlet hiddenIds;\r\n\tTimeAgo.addLocale(en);\r\n\tconst timeAgo = new TimeAgo('en-US');\r\n\tlet curPage;\r\n\tconst [data, setData] = useState(initData);\r\n\tif (bEnv !== undefined) {\r\n\t\tcurPage = window.curPage;\r\n\t\t//delete window.curPage;\r\n\t\tif (localStorage.getItem('hiddenIds') === null) {\r\n\t\t\thiddenIds = [];\r\n\t\t}\r\n\t\telse {\r\n\t\t\thiddenIds = (localStorage.getItem('hiddenIds')).split(\",\");\r\n\t\t\thiddenIds.forEach((elm) => {\r\n\t\t\t\tlet a = data.findIndex((obj) => obj.objectID === elm);\r\n\t\t\t\tif (a !== -1) {\r\n\t\t\t\t\tdata.splice(a, 1);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tconst upVote = (e) =>  {\r\n\r\n\t}\r\n\r\n\tconst hidePost = (e) => {\r\n\t\tconsole.log(data.length);\r\n\t\tconst id = e.target.dataset.id;\r\n\t\tlet a = data.findIndex((obj) => obj.objectID === id);\r\n\t\tif (a !== -1) {\r\n\t\t\tdata.splice(a , 1);\r\n\t\t}\r\n\t\tsetData(data.map((obj) => obj));\r\n\t\thiddenIds.push(id);\r\n\t\tlocalStorage.setItem('hiddenIds', hiddenIds);\r\n\t}\r\n\r\n\tconst navigate = (e) => {\r\n\t\tif (e.target.textContent === \"Previous\") {\r\n\t\t\tcurPage === 1 ? window.location.href = \"/\" : window.location.href = `/?page=${curPage - 1}`;\r\n\t\t}\r\n\t\telse {\r\n\t\t\twindow.location.href = `/?page=${curPage + 1}`;\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"newsList\">\r\n\t\t\t<table>\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th>Comments</th>\r\n\t\t\t\t\t\t<th>Vote<br />Count</th>\r\n\t\t\t\t\t\t<th>UpVote</th>\r\n\t\t\t\t\t\t<th style={{ textAlign: 'left' }}>News Details</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{data.map((data) =>\r\n\t\t\t\t\t\t<tr key={data.objectID}>\r\n\t\t\t\t\t\t\t<td className=\"bold\">{data.num_comments}</td>\r\n\t\t\t\t\t\t\t<td className=\"bold\">{data.points}</td>\r\n\t\t\t\t\t\t\t<td><span className=\"up\" onClick={upVote} data-id={data.objectID}></span></td>\r\n\t\t\t\t\t\t\t<td className=\"newsD\"><a href={data.url} className=\"bold\">{data.title}</a>\r\n\t\t\t\t\t\t\t\t<span>{data.url !== null ? '(' + domain.from(String(data.url)).replace('www.', '') + ')' : \"\"}</span>\r\n\t\t\t\t\t\t\t\t<span className=\"auth\">{data.author}</span>\r\n\t\t\t\t\t\t\t\t<span>{timeAgo.format(new Date(data.created_at)).replace('an', '1').replace('a minute', '1 minute')}</span>\r\n\t\t\t\t\t\t\t\t<span data-id={data.objectID} className=\"hide\" onClick={hidePost}>hide</span>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t\t<table className=\"navTable\"><tbody>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td className=\"pn\">\r\n\t\t\t\t\t\t<span className={global.curPage === 0 ? 'count0' : ''} suppressHydrationWarning={true} onClick={navigate}>Previous</span><b>|</b><span onClick={navigate}>Next</span>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr></tbody>\r\n\t\t\t</table>\r\n\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default NewsList;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, ResponsiveContainer } from 'recharts';\r\nimport './voteChart.scss';\r\n\r\nconst VoteChart = ({ data }) => {\r\n\t\r\n\treturn (\r\n\t\t<div className=\"voteC\">\r\n\t\t<ResponsiveContainer width='100%' height={300}>\r\n\t\t\t<LineChart width=\"100%\" height={300} data={data}>\t\t\t\t\r\n\t\t\t\t<CartesianGrid vertical={false} />\r\n\t\t\t\t<Line type=\"linear\" dataKey=\"points\" stroke=\"#047cb0\" dot={{ fill: '#047cb0'}} strokeWidth='3' />\r\n\t\t\t\t<XAxis dataKey=\"objectID\" label={{ value: 'ID', stroke: '#000', strokeWidth: 1, position: 'bottom', offset: -25 }} angle={-90} height={100} tickSize={30} tickLine={false} padding={{ left: 10, right: 10 }} interval={0} />\r\n\t\t\t\t<YAxis dataKey=\"points\" label={{ value: 'Votes', position: 'left', fontSize: 15, fontWeight: 'bold', strokeWidth: 10, angle: -90, offset: -15 }} />\r\n\t\t\t</LineChart>\r\n\t\t\t</ResponsiveContainer>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nexport default VoteChart;","import React from 'react';\nimport './App.scss';\nimport NewsList from './components/NewsList';\nimport VoteChart from './components/VoteChart';\n\nfunction App({ initData }) {\n\tconst votes = [];\n\tinitData.forEach((obj) => {\n\t\tconst { objectID, points } = obj;\n\t\tvotes.push({ objectID, points });\n\t});\n\n\treturn (\n\t\t<>\n\t\t\t<NewsList initData={initData} />\n\t\t\t<VoteChart data={votes} />\n\t\t</>\n\t)\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlet initData;\nif(global.window !== undefined){\n\t\tinitData = window.initData;\n\t\tdelete window.initData;\n\t}\nReactDOM.hydrate(\n  <React.StrictMode>\n    <App initData={initData} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}