{"version":3,"sources":["components/NewsList.js","App.js","serviceWorker.js","index.js"],"names":["NewsList","initData","TimeAgo","addLocale","en","timeAgo","className","map","data","key","objectID","num_comments","points","href","url","title","domain","from","String","replace","format","Date","created_at","author","colSpan","App","Boolean","window","location","hostname","match","ReactDOM","hydrate","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQA2CeA,G,MArCE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnBC,IAAQC,UAAUC,KAClB,IAAMC,EAAU,IAAIH,IAAQ,SAE5B,OACC,yBAAKI,UAAU,YACd,+BACC,+BACC,4BACC,wCACA,mCAAQ,6BAAR,SACA,sCACA,8CAGF,+BACEL,EAASM,KAAI,SAACC,GAAD,OACb,wBAAIC,IAAKD,EAAKE,UACb,wBAAIJ,UAAU,QAAQE,EAAKG,cAC3B,wBAAIL,UAAU,QAAQE,EAAKI,QAC3B,4BAAI,0BAAMN,UAAU,QACpB,4BAAI,uBAAGO,KAAML,EAAKM,IAAKR,UAAU,QAAQE,EAAKO,OAC7C,8BAAoB,OAAbP,EAAKM,IAAe,IAAME,IAAOC,KAAKC,OAAOV,EAAKM,MAAMK,QAAQ,OAAQ,IAAM,IAAM,IAC3F,8BAAOd,EAAQe,OAAO,IAAIC,KAAKb,EAAKc,cAAoB,oCAAUd,EAAKe,aAI1E,4BACC,wBAAIC,QAAQ,YCvBHC,MAPf,YAA4B,IAAbxB,EAAY,EAAZA,SAEd,OACC,kBAAC,EAAD,CAAUA,SAAUA,KCKFyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,QACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKhC,SAAU0B,OAAO1B,YAExBiC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.45d495e0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport TimeAgo from 'javascript-time-ago';\r\nimport en from 'javascript-time-ago/locale/en';\r\nimport domain from 'url-domain-name';\r\nimport './newsList.scss';\r\n\r\nconst NewsList = ({ initData }) => {\r\n\tTimeAgo.addLocale(en);\r\n\tconst timeAgo = new TimeAgo('en-US');\r\n\r\n\treturn (\r\n\t\t<div className=\"newsList\">\r\n\t\t\t<table>\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr >\r\n\t\t\t\t\t\t<th>Comments</th>\r\n\t\t\t\t\t\t<th>Vote<br />Count</th>\r\n\t\t\t\t\t\t<th>UpVote</th>\r\n\t\t\t\t\t\t<th>News Details</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{initData.map((data) =>\r\n\t\t\t\t\t\t<tr key={data.objectID}>\r\n\t\t\t\t\t\t\t<td className=\"bold\">{data.num_comments}</td>\r\n\t\t\t\t\t\t\t<td className=\"bold\">{data.points}</td>\r\n\t\t\t\t\t\t\t<td><span className=\"up\"></span></td>\r\n\t\t\t\t\t\t\t<td><a href={data.url} className=\"bold\">{data.title}</a>\r\n\t\t\t\t\t\t\t\t<span>{data.url !== null ? '(' + domain.from(String(data.url)).replace('www.', '') + ')' : \"\"}</span>\r\n\t\t\t\t\t\t\t\t<span>{timeAgo.format(new Date(data.created_at))}</span><span>by {data.author}</span></td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td colSpan=\"4\"></td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default NewsList;","import React from 'react';\nimport './App.scss';\nimport NewsList from './components/NewsList';\n\nfunction App({ initData }) {\n\n\treturn (\n\t\t<NewsList initData={initData} />\n\t)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.hydrate(\n  <React.StrictMode>\n    <App initData={window.initData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}